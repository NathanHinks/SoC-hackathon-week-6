{"version":3,"sources":["Square/index.js","Board/index.js","App/App.js","reportWebVitals.js","index.js"],"names":["Square","item","fillSquare","index","className","onClick","transitionName","Board","board","winner","isPlayerXTurn","handleReset","map","startBoard","App","useState","setPlayerXTurn","setBoard","boardArray","currentWinner","forEach","win","a","b","c","checkWinner","boardCopy","resetBoard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAOeA,MAJf,YAA6C,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,WAAYC,EAAS,EAATA,MAC/B,OAAO,wBAAQC,UAAU,SAASC,QAAU,kBAAMH,EAAWC,IAAQG,eAAe,gBAA7E,SAA8FL,K,MCoB1FM,MAnBf,YAA2E,IAA1DL,EAAyD,EAAzDA,WAAYM,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,YAC1D,OACC,sBAAKP,UAAU,0BAAf,UACE,IACD,qBAAKA,UAAU,iBAAf,SACcK,EAAM,qBACWA,GADX,uBAEaC,EAAgB,IAAM,OAEvD,qBAAKN,UAAU,QAAf,SACEI,EAAMI,KAAI,SAACX,EAAME,GAAP,OAAiB,cAAC,EAAD,CAAQA,MAAOA,EAAOD,WAAYA,EAAwBD,KAAMA,GAAbE,QAEhF,wBAAQC,UAAU,YAAYC,QAASM,EAAvC,uBCbGE,EAAa,CAAE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAqDtDC,MAnDf,WAAgB,IAAD,EAC4BC,oBAAS,GADrC,mBACNL,EADM,KACSM,EADT,OAEcD,mBAASF,GAFvB,mBAENL,EAFM,KAECS,EAFD,KAGPR,EAaP,SAAqBS,GACpB,IAUIC,EAAgB,KASpB,MAnBqB,CACpB,CAAE,EAAG,EAAG,GACR,CAAE,EAAG,EAAG,GACR,CAAE,EAAG,EAAG,GACR,CAAE,EAAG,EAAG,GACR,CAAE,EAAG,EAAG,GACR,CAAE,EAAG,EAAG,GACR,CAAE,EAAG,EAAG,GACR,CAAE,EAAG,EAAG,IAIIC,SAAQ,SAACC,GAAS,IAAD,cACTA,EADS,GACrBC,EADqB,KAClBC,EADkB,KACfC,EADe,KAEP,OAAlBN,EAAWI,IAAeJ,EAAWI,KAAOJ,EAAWK,IAAML,EAAWI,KAAOJ,EAAWM,KAC7FL,EAAgBD,EAAWI,OAItBH,EAjCQM,CAAYjB,GAyC5B,OACC,qBAAKJ,UAAU,MAAf,SACC,cAAC,EAAD,CAAOF,WAzCT,SAAoBC,GACnB,IAAMuB,EAAS,YAAQlB,GAER,OAAXC,GAAwC,OAArBiB,EAAUvB,KACfuB,EAAUvB,GAA3BO,EAAoC,IAA2B,KAGhEO,EAASS,GACTV,GAAgBN,IAiCgBF,MAAOA,EAAOG,YAP/C,WACC,IAAMgB,EAAU,UAAQd,GACxBI,EAASU,IAK+DlB,OAAQA,EAAQC,cAAeA,OCxC1FkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.23deec56.chunk.js","sourcesContent":["import React from \"react\";\nimport './square.css';\n\nfunction Square({item, fillSquare, index }) {\n    return <button className=\"square\" onClick ={() => fillSquare(index)} transitionName=\"button-change\">{item}</button>\n}\n\nexport default Square;","import React from 'react';\nimport Square from '../Square';\nimport './board.css';\n\n//PROPS this needs fillsquares, board\nfunction Board({ fillSquare, board, winner, isPlayerXTurn, handleReset }) {\n\treturn (\n\t\t<div className='board-display-container'>\n\t\t\t{' '}\n\t\t\t<div className='current-player'>\n                {winner ?\n                    `Winner is: ${winner}` :\n                    `Next Player: ${isPlayerXTurn ? 'X' : 'O'}`}\n\t\t\t</div>\n\t\t\t<div className='board'>\n\t\t\t\t{board.map((item, index) => <Square index={index} fillSquare={fillSquare} key={index} item={item} />)}\n\t\t\t</div>\n\t\t\t<button className='reset-btn' onClick={handleReset}>\n\t\t\t\tReset\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default Board;\n","import './App.css';\nimport React, { useState } from 'react';\nimport Board from '../Board';\n\nconst startBoard = [ null, null, null, null, null, null, null, null, null ];\n\nfunction App() {\n\tconst [ isPlayerXTurn, setPlayerXTurn ] = useState(true);\n\tconst [ board, setBoard ] = useState(startBoard);\n  const winner = checkWinner(board);\n\n\tfunction fillSquare(index) {\n\t\tconst boardCopy = [ ...board ];\n\n\t\tif (winner === null && boardCopy[index] === null) {\n\t\t\tisPlayerXTurn ? (boardCopy[index] = 'X') : (boardCopy[index] = 'O');\n\t\t}\n\n\t\tsetBoard(boardCopy);\n\t\tsetPlayerXTurn(!isPlayerXTurn);\n\t}\n\n\tfunction checkWinner(boardArray) {\n\t\tconst possibleWins = [\n\t\t\t[ 0, 1, 2 ],\n\t\t\t[ 3, 4, 5 ],\n\t\t\t[ 6, 7, 8 ],\n\t\t\t[ 0, 3, 6 ],\n\t\t\t[ 1, 4, 7 ],\n\t\t\t[ 2, 5, 8 ],\n\t\t\t[ 0, 4, 8 ],\n\t\t\t[ 2, 4, 6 ],\n\t\t];\n\t\tlet currentWinner = null;\n\n\t\tpossibleWins.forEach((win) => {\n\t\t\tconst [ a, b, c ] = win;\n\t\t\tif (boardArray[a] !== null && boardArray[a] === boardArray[b] && boardArray[a] === boardArray[c]) {\n\t\t\t\tcurrentWinner = boardArray[a];\n\t\t\t}\n\t\t});\n    //because can't return in forEach\n\t\treturn currentWinner;\n\t}\n\n\tfunction handleReset() {\n\t\tconst resetBoard = [ ...startBoard ];\n\t\tsetBoard(resetBoard);\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Board fillSquare={fillSquare} board={board} handleReset={handleReset} winner={winner} isPlayerXTurn={isPlayerXTurn} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}